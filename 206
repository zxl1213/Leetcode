//
struct ListNode* removeElements(struct ListNode* head, int val) {
struct ListNode *result = NULL; // 剩下链表的第一个结点
struct ListNode *tail = NULL;   // 剩下链表的最后一个结点
struct ListNode *cur = head;
while (cur != NULL) {//要插结点不为空
  if (cur->val != val) {//要插结点值不等于val
//第一次插入  
    if (tail == NULL) {//如果新链表尾结点为空
      result = tail = cur;//插入的第一个结点c既为头也为尾
//之后插入
    } else {//新链表尾结点不为空
      tail->next = cur;//尾插
      tail = cur;//新链表尾结点后移
    }
  }
  cur = cur->next;//旧链表结点后移
}
//循环结束后尾结点不为空,则尾结点的位置区更新为NULL
if (tail != NULL) {
  tail->next = NULL;
}
//返回新链表
return result;
}
////////////////////////////////////
//结点角度
struct ListNode* reverselist(struct ListNode* head) {
	//first  1 2 3 4 5  NULL
	ListNode *result = NULL
		ListNode *c = head;//当前位置
	while (c != NULL){
		struct ListNode *next = c->next//用next存下c->next
			c->next = result;//改变当前位置的指向(反转)
		result = c;//前驱位置后移
		c = next;//当前位置后移		 
	}
	return result;
}
//////////////////////////////////////
//指针角度
struct ListNode* reversrList(struct ListNode* head){
   if(head=NULL){
   return head;
   }
   struct ListNode* p1,p2,p3;
   p1=NULL;
   p2=head;
   p3=head->next;
   while(p2!=NULL){
      p2->next=p1;//改变当前指向
	  p1=p2;//前驱结点后移
	  p2=p3;//当前结点后移
	  if(p3!=NULL){
	    p3=p3->next;
	  }
   }
 }  
